<?php

/**
 * BaseReceipt
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property int $book_id
 * @property enum $status
 * @property string $receipt_number
 * @property int $general_library_id
 * @property int $currency_id
 * @property string $purchase_order_number
 * @property date $date_receive
 * @property date $period
 * @property date $due_date
 * @property string $header_message
 * @property string $footer_message
 * @property decimal $total_amount
 * @property enum $mode_payment
 * @property Book $Book
 * @property GeneralLibrary $GeneralLibrary
 * @property Currency $Currency
 * @property Doctrine_Collection $ReceiptParticularEntry
 * @property Doctrine_Collection $ReceiptAccountEntry
 * @property Doctrine_Collection $ReceiptCashEntry
 * @property Doctrine_Collection $ReceiptCheckEntry
 * 
 * @method int                 getBookId()                 Returns the current record's "book_id" value
 * @method enum                getStatus()                 Returns the current record's "status" value
 * @method string              getReceiptNumber()          Returns the current record's "receipt_number" value
 * @method int                 getGeneralLibraryId()       Returns the current record's "general_library_id" value
 * @method int                 getCurrencyId()             Returns the current record's "currency_id" value
 * @method string              getPurchaseOrderNumber()    Returns the current record's "purchase_order_number" value
 * @method date                getDateReceive()            Returns the current record's "date_receive" value
 * @method date                getPeriod()                 Returns the current record's "period" value
 * @method date                getDueDate()                Returns the current record's "due_date" value
 * @method string              getHeaderMessage()          Returns the current record's "header_message" value
 * @method string              getFooterMessage()          Returns the current record's "footer_message" value
 * @method decimal             getTotalAmount()            Returns the current record's "total_amount" value
 * @method enum                getModePayment()            Returns the current record's "mode_payment" value
 * @method Book                getBook()                   Returns the current record's "Book" value
 * @method GeneralLibrary      getGeneralLibrary()         Returns the current record's "GeneralLibrary" value
 * @method Currency            getCurrency()               Returns the current record's "Currency" value
 * @method Doctrine_Collection getReceiptParticularEntry() Returns the current record's "ReceiptParticularEntry" collection
 * @method Doctrine_Collection getReceiptAccountEntry()    Returns the current record's "ReceiptAccountEntry" collection
 * @method Doctrine_Collection getReceiptCashEntry()       Returns the current record's "ReceiptCashEntry" collection
 * @method Doctrine_Collection getReceiptCheckEntry()      Returns the current record's "ReceiptCheckEntry" collection
 * @method Receipt             setBookId()                 Sets the current record's "book_id" value
 * @method Receipt             setStatus()                 Sets the current record's "status" value
 * @method Receipt             setReceiptNumber()          Sets the current record's "receipt_number" value
 * @method Receipt             setGeneralLibraryId()       Sets the current record's "general_library_id" value
 * @method Receipt             setCurrencyId()             Sets the current record's "currency_id" value
 * @method Receipt             setPurchaseOrderNumber()    Sets the current record's "purchase_order_number" value
 * @method Receipt             setDateReceive()            Sets the current record's "date_receive" value
 * @method Receipt             setPeriod()                 Sets the current record's "period" value
 * @method Receipt             setDueDate()                Sets the current record's "due_date" value
 * @method Receipt             setHeaderMessage()          Sets the current record's "header_message" value
 * @method Receipt             setFooterMessage()          Sets the current record's "footer_message" value
 * @method Receipt             setTotalAmount()            Sets the current record's "total_amount" value
 * @method Receipt             setModePayment()            Sets the current record's "mode_payment" value
 * @method Receipt             setBook()                   Sets the current record's "Book" value
 * @method Receipt             setGeneralLibrary()         Sets the current record's "GeneralLibrary" value
 * @method Receipt             setCurrency()               Sets the current record's "Currency" value
 * @method Receipt             setReceiptParticularEntry() Sets the current record's "ReceiptParticularEntry" collection
 * @method Receipt             setReceiptAccountEntry()    Sets the current record's "ReceiptAccountEntry" collection
 * @method Receipt             setReceiptCashEntry()       Sets the current record's "ReceiptCashEntry" collection
 * @method Receipt             setReceiptCheckEntry()      Sets the current record's "ReceiptCheckEntry" collection
 * 
 * @package    Gcross Accounting System
 * @subpackage model
 * @author     Jerick Y. Duguran & Mary Ann I. Altar
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseReceipt extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('receipt');
        $this->hasColumn('book_id', 'int', 11, array(
             'type' => 'int',
             'notnull' => true,
             'default' => '0',
             'length' => 11,
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'UNPAID',
              1 => 'PARTIAL_PAID',
              2 => 'FULL PAID',
             ),
             'default' => 'UNPAID',
             ));
        $this->hasColumn('receipt_number', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'unique' => true,
             'length' => 50,
             ));
        $this->hasColumn('general_library_id', 'int', 11, array(
             'type' => 'int',
             'length' => 11,
             ));
        $this->hasColumn('currency_id', 'int', 11, array(
             'type' => 'int',
             'length' => 11,
             ));
        $this->hasColumn('purchase_order_number', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('date_receive', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('period', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('due_date', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('header_message', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('footer_message', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('total_amount', 'decimal', 12, array(
             'type' => 'decimal',
             'scale' => 2,
             'default' => 0,
             'notnull' => true,
             'length' => 12,
             ));
        $this->hasColumn('mode_payment', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'CASH',
              1 => 'CHECK',
             ),
             'default' => 'CASH',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Book', array(
             'local' => 'book_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('GeneralLibrary', array(
             'local' => 'general_library_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Currency', array(
             'local' => 'currency_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('ReceiptParticularEntry', array(
             'local' => 'id',
             'foreign' => 'receipt_id'));

        $this->hasMany('ReceiptAccountEntry', array(
             'local' => 'id',
             'foreign' => 'receipt_id'));

        $this->hasMany('ReceiptCashEntry', array(
             'local' => 'id',
             'foreign' => 'receipt_id'));

        $this->hasMany('ReceiptCheckEntry', array(
             'local' => 'id',
             'foreign' => 'receipt_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}