<?php

/**
 * BaseParticularTemplate
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $code
 * @property string $name
 * @property string $particulars
 * @property string $header_message
 * @property string $footer_message
 * @property int $project_id
 * @property int $department_id
 * @property Project $Project
 * @property Department $Department
 * @property Doctrine_Collection $JournalBook
 * @property Doctrine_Collection $JournalBookParticularTemplate
 * @property Doctrine_Collection $ParticularTemplateEntry
 * 
 * @method string              getCode()                          Returns the current record's "code" value
 * @method string              getName()                          Returns the current record's "name" value
 * @method string              getParticulars()                   Returns the current record's "particulars" value
 * @method string              getHeaderMessage()                 Returns the current record's "header_message" value
 * @method string              getFooterMessage()                 Returns the current record's "footer_message" value
 * @method int                 getProjectId()                     Returns the current record's "project_id" value
 * @method int                 getDepartmentId()                  Returns the current record's "department_id" value
 * @method Project             getProject()                       Returns the current record's "Project" value
 * @method Department          getDepartment()                    Returns the current record's "Department" value
 * @method Doctrine_Collection getJournalBook()                   Returns the current record's "JournalBook" collection
 * @method Doctrine_Collection getJournalBookParticularTemplate() Returns the current record's "JournalBookParticularTemplate" collection
 * @method Doctrine_Collection getParticularTemplateEntry()       Returns the current record's "ParticularTemplateEntry" collection
 * @method ParticularTemplate  setCode()                          Sets the current record's "code" value
 * @method ParticularTemplate  setName()                          Sets the current record's "name" value
 * @method ParticularTemplate  setParticulars()                   Sets the current record's "particulars" value
 * @method ParticularTemplate  setHeaderMessage()                 Sets the current record's "header_message" value
 * @method ParticularTemplate  setFooterMessage()                 Sets the current record's "footer_message" value
 * @method ParticularTemplate  setProjectId()                     Sets the current record's "project_id" value
 * @method ParticularTemplate  setDepartmentId()                  Sets the current record's "department_id" value
 * @method ParticularTemplate  setProject()                       Sets the current record's "Project" value
 * @method ParticularTemplate  setDepartment()                    Sets the current record's "Department" value
 * @method ParticularTemplate  setJournalBook()                   Sets the current record's "JournalBook" collection
 * @method ParticularTemplate  setJournalBookParticularTemplate() Sets the current record's "JournalBookParticularTemplate" collection
 * @method ParticularTemplate  setParticularTemplateEntry()       Sets the current record's "ParticularTemplateEntry" collection
 * 
 * @package    Gcross Accounting System
 * @subpackage model
 * @author     Jerick Y. Duguran & Mary Ann I. Altar
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseParticularTemplate extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('particular_template');
        $this->hasColumn('code', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'unique' => true,
             'length' => 50,
             ));
        $this->hasColumn('name', 'string', 50, array(
             'type' => 'string',
             'length' => 50,
             ));
        $this->hasColumn('particulars', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('header_message', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('footer_message', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('project_id', 'int', 11, array(
             'type' => 'int',
             'length' => 11,
             ));
        $this->hasColumn('department_id', 'int', 11, array(
             'type' => 'int',
             'length' => 11,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Project', array(
             'local' => 'project_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasOne('Department', array(
             'local' => 'department_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $this->hasMany('JournalBook', array(
             'refClass' => 'JournalBookParticularTemplate',
             'local' => 'particular_template_id',
             'foreign' => 'journal_book_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('JournalBookParticularTemplate', array(
             'local' => 'id',
             'foreign' => 'particular_template_id'));

        $this->hasMany('ParticularTemplateEntry', array(
             'local' => 'id',
             'foreign' => 'particular_template_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}