<?php

/**
 * BaseGeneralLibraryBillingInfo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property int $general_library_id
 * @property string $drawing_no
 * @property string $specs_no
 * @property string $bill_to
 * @property string $building_no
 * @property string $street_1
 * @property string $street_2
 * @property string $city
 * @property string $postal_code
 * @property string $province
 * @property int $country_id
 * @property string $attention
 * @property GeneralLibrary $GeneralLibrary
 * @property Country $Country
 * 
 * @method int                       getGeneralLibraryId()   Returns the current record's "general_library_id" value
 * @method string                    getDrawingNo()          Returns the current record's "drawing_no" value
 * @method string                    getSpecsNo()            Returns the current record's "specs_no" value
 * @method string                    getBillTo()             Returns the current record's "bill_to" value
 * @method string                    getBuildingNo()         Returns the current record's "building_no" value
 * @method string                    getStreet1()            Returns the current record's "street_1" value
 * @method string                    getStreet2()            Returns the current record's "street_2" value
 * @method string                    getCity()               Returns the current record's "city" value
 * @method string                    getPostalCode()         Returns the current record's "postal_code" value
 * @method string                    getProvince()           Returns the current record's "province" value
 * @method int                       getCountryId()          Returns the current record's "country_id" value
 * @method string                    getAttention()          Returns the current record's "attention" value
 * @method GeneralLibrary            getGeneralLibrary()     Returns the current record's "GeneralLibrary" value
 * @method Country                   getCountry()            Returns the current record's "Country" value
 * @method GeneralLibraryBillingInfo setGeneralLibraryId()   Sets the current record's "general_library_id" value
 * @method GeneralLibraryBillingInfo setDrawingNo()          Sets the current record's "drawing_no" value
 * @method GeneralLibraryBillingInfo setSpecsNo()            Sets the current record's "specs_no" value
 * @method GeneralLibraryBillingInfo setBillTo()             Sets the current record's "bill_to" value
 * @method GeneralLibraryBillingInfo setBuildingNo()         Sets the current record's "building_no" value
 * @method GeneralLibraryBillingInfo setStreet1()            Sets the current record's "street_1" value
 * @method GeneralLibraryBillingInfo setStreet2()            Sets the current record's "street_2" value
 * @method GeneralLibraryBillingInfo setCity()               Sets the current record's "city" value
 * @method GeneralLibraryBillingInfo setPostalCode()         Sets the current record's "postal_code" value
 * @method GeneralLibraryBillingInfo setProvince()           Sets the current record's "province" value
 * @method GeneralLibraryBillingInfo setCountryId()          Sets the current record's "country_id" value
 * @method GeneralLibraryBillingInfo setAttention()          Sets the current record's "attention" value
 * @method GeneralLibraryBillingInfo setGeneralLibrary()     Sets the current record's "GeneralLibrary" value
 * @method GeneralLibraryBillingInfo setCountry()            Sets the current record's "Country" value
 * 
 * @package    Gcross Accounting System
 * @subpackage model
 * @author     Jerick Y. Duguran & Mary Ann I. Altar
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseGeneralLibraryBillingInfo extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('general_library_billing_info');
        $this->hasColumn('general_library_id', 'int', 11, array(
             'type' => 'int',
             'length' => 11,
             ));
        $this->hasColumn('drawing_no', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 50,
             ));
        $this->hasColumn('specs_no', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 50,
             ));
        $this->hasColumn('bill_to', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 50,
             ));
        $this->hasColumn('building_no', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 50,
             ));
        $this->hasColumn('street_1', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 50,
             ));
        $this->hasColumn('street_2', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 50,
             ));
        $this->hasColumn('city', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 50,
             ));
        $this->hasColumn('postal_code', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 50,
             ));
        $this->hasColumn('province', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 50,
             ));
        $this->hasColumn('country_id', 'int', 11, array(
             'type' => 'int',
             'length' => 11,
             ));
        $this->hasColumn('attention', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'default' => '',
             'length' => 50,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('GeneralLibrary', array(
             'local' => 'general_library_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Country', array(
             'local' => 'country_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}